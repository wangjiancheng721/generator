package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import java.util.List;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${table.entityName.toLowerCase()}Mapper;

    /**
    * 注意当前的id主键 是默认的"id"，具体情况根据数据库主键的名称进行修改
    */
    @Override
    public ${entity} get${table.entityName}InfoById(Integer id){
        ${entity} ${table.entityName.toLowerCase()} = null;
        try {
            ${table.entityName.toLowerCase()} = ${table.entityName.toLowerCase()}Mapper.selectOne(new QueryWrapper<${entity}>().eq("id", id));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (null == ${table.entityName.toLowerCase()}){
            throw new Exception();
        }
        return ${table.entityName.toLowerCase()};
    }

    /**
    * 注意当前的name 名称 是默认的"name"，具体情况根据数据库对应的名称进行修改
    */
    @Override
    public ${entity} get${table.entityName}InfoByName(String ${table.entityName.toLowerCase()}Name){
        ${entity} ${table.entityName.toLowerCase()} = null;
        try {
            ${table.entityName.toLowerCase()} = ${table.entityName.toLowerCase()}Mapper.selectOne(new QueryWrapper<${entity}>().eq("name", ${table.entityName.toLowerCase()}Name));
        } catch (Exception e) {
            e.printStackTrace();
            //log.error("[{${table.entityName.toLowerCase()}}] 未知异常");
        }
        if (null == ${table.entityName.toLowerCase()}){
            throw new Exception();
        }
        return ${table.entityName.toLowerCase()};
    }

    @Override
    public boolean update${table.entityName}(${entity} ${table.entityName.toLowerCase()}){
        int row = 0;
        try {
            //row = ${table.entityName.toLowerCase()}Mapper.update(${table.entityName.toLowerCase()}, new UpdateWrapper<${entity}>().eq("id", ${table.entityName.toLowerCase()}.getId()));
        } catch (Exception e) {
            e.printStackTrace();
            //log.error("[{${table.entityName.toLowerCase()}}] 未知异常");
        }
        return row > 0;
    }

    @Override
    public boolean insert${table.entityName}(${entity} ${table.entityName.toLowerCase()}){
        int row = 0;
        try {
            row = ${table.entityName.toLowerCase()}Mapper.insert(${table.entityName.toLowerCase()});
        } catch (Exception e) {
            e.printStackTrace();
            //log.error("[{${table.entityName.toLowerCase()}}] 未知异常");
        }
        return row > 0;
    }

    @Override
    public boolean delete${table.entityName}(${entity} ${table.entityName.toLowerCase()}){
        int row = 0;
        try {
            row = ${table.entityName.toLowerCase()}Mapper.deleteById(${table.entityName.toLowerCase()}.getId());
        } catch (Exception e) {
            e.printStackTrace();
            //log.error("[{${table.entityName.toLowerCase()}}] 未知异常");
        }
        return row > 0;
    }

    @Override
    public boolean delete${table.entityName}List(List<Integer> ids) {
        int row = 0;
        try {
            row = ${table.entityName.toLowerCase()}Mapper.deleteBatchIds(ids);
        } catch (Exception e) {
            e.printStackTrace();
            //log.error("[{${table.entityName.toLowerCase()}}] 未知异常");
        }
        return row>0;
    }

    @Override
    public Object get${table.entityName}List(Integer pageNo,Integer size){
        Page<${entity}> page = new Page<>(pageNo,size);
        Page ${table.entityName.toLowerCase()}Page = ${table.entityName.toLowerCase()}Mapper.selectPage(page, new QueryWrapper<${entity}>());
            return TableDtoUtils.setTableDto(${table.entityName.toLowerCase()}Page.getTotal(),${table.entityName.toLowerCase()}Page.getRecords());
        }
    }
